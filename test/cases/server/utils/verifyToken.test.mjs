import { expect } from "@hapi/code";
import * as Lab from "@hapi/lab";
import { token } from "@hapi/jwt";
import sinon from "sinon";
import config from "../../../../src/server/config.js";
import {
  generateSessionTokenForForm,
  verifyToken,
} from "../../../../src/server/plugins/initialiseSession/helpers.js";

export const lab = Lab.script();
const { describe, test, beforeEach } = lab;

describe("verifyToken", function () {
  beforeEach(() => {
    sinon.restore();
  });
  test("token generated by generateSessionTokenForForm is valid", () => {
    const expiredToken = generateSessionTokenForForm("localhost", "test");
    const decodedExpiredToken = token.decode(expiredToken);

    expect(verifyToken(decodedExpiredToken).isValid).to.be.true();
  });
  test("can detect expired tokens", () => {
    sinon.stub(config, "initialisedSessionTimeout").value(-5);
    const expiredToken = generateSessionTokenForForm("localhost", "test");
    const decodedExpiredToken = token.decode(expiredToken);

    expect(verifyToken(decodedExpiredToken).isValid).to.be.false();
  });
  test("can detect incorrect key/algorithm", () => {
    // generate key with correct key/alg first
    const exampleToken = generateSessionTokenForForm("localhost", "test");
    const decodedToken = token.decode(exampleToken);

    sinon.stub(config, "initialisedSessionKey").value("something new");
    expect(verifyToken(decodedToken).isValid).to.be.false();

    sinon.restore();
    sinon.stub(config, "initialisedSessionAlgorithm").value("PS384");
    expect(verifyToken(decodedToken).isValid).to.be.false();

    sinon.restore();
    expect(verifyToken(decodedToken).isValid).to.be.true();
  });
});
