name: Publish Engine Plugin

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Type of version bump to perform'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      npm_tag:
        description: 'Custom npm dist-tag (ALWAYS specify for non-standard branches to avoid overwriting latest)'
        required: false
        default: 'dev'
        type: string
      dry_run:
        description: 'Dry run (no actual publishing)'
        required: false
        default: true
        type: boolean

  push:
    branches:
      - main
      - 'release/v[0-9]*'

concurrency:
  group: publish-engine-plugin-${{ github.ref }}

permissions:
  contents: write
  packages: write

jobs:
  determine-path:
    name: Determine Workflow Path
    runs-on: ubuntu-24.04
    outputs:
      workflow-path: ${{ steps.check-path.outputs.workflow-path }}
      version-bump: ${{ steps.check-path.outputs.version-bump }}
      npm-tag: ${{ steps.check-path.outputs.npm-tag }}
      
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Determine workflow path
        id: check-path
        run: |
          # Default values
          WORKFLOW_PATH="unknown"
          SHOULD_BUILD="false"
          VERSION_BUMP="patch"
          NPM_TAG=""
          
          # Manual workflow dispatch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "üîµ Manual workflow trigger detected"
            WORKFLOW_PATH="manual"
            SHOULD_BUILD="true"
            VERSION_BUMP="${{ github.event.inputs.version_bump }}"
            NPM_TAG="${{ github.event.inputs.npm_tag }}"
          
          # Automatic triggers from push events
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            # Check for version bump commit first
            COMMIT_MSG=$(git log -1 --pretty=%B)
            if [[ "$COMMIT_MSG" == *"MINOR"* || "$COMMIT_MSG" == *"MAJOR"* ]]; then
              echo "üü¢ Version bump commit detected!"
              WORKFLOW_PATH="version-bump"
              SHOULD_BUILD="true"
              
              if [[ "$COMMIT_MSG" == *"MINOR"* ]]; then
                echo "Minor version bump"
                VERSION_BUMP="minor"
              elif [[ "$COMMIT_MSG" == *"MAJOR"* ]]; then
                echo "Major version bump"
                VERSION_BUMP="major"
              fi
              
            # Next, check if any relevant files changed (matching the original path filters)
            elif git diff --name-only HEAD^ HEAD | grep -v "\.test\." | grep -q -E "(^\.browserslistrc$|^babel\.config\.|^src/)"; then
              echo "üü† Relevant file changes detected"
              WORKFLOW_PATH="file-changes"
              SHOULD_BUILD="true"
              
            # No relevant changes - skip publishing
            else
              echo "‚ö™ No publishing-relevant changes detected"
              WORKFLOW_PATH="skip"
            fi
          fi
          
          # Set outputs for downstream jobs
          echo "workflow-path=$WORKFLOW_PATH" >> $GITHUB_OUTPUT
          echo "should-build=$SHOULD_BUILD" >> $GITHUB_OUTPUT
          echo "version-bump=$VERSION_BUMP" >> $GITHUB_OUTPUT
          echo "npm-tag=$NPM_TAG" >> $GITHUB_OUTPUT
          
          # Summary for logs
          echo "===========================================" 
          echo "Workflow Path: $WORKFLOW_PATH"
          echo "Should Build: $SHOULD_BUILD"
          echo "Version Bump: $VERSION_BUMP"
          echo "NPM Tag: ${NPM_TAG:-<auto-detect>}"
          echo "==========================================="

  build:
    name: Build
    needs: [determine-path]
    if: needs.determine-path.outputs.workflow-path != 'skip'
    runs-on: ubuntu-24.04

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache dependencies
        uses: actions/cache@v4
        id: npm-install-cache
        with:
          enableCrossOsArchive: true
          key: npm-install-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          path: node_modules

      - name: Cache build
        uses: actions/cache@v4
        with:
          enableCrossOsArchive: true
          key: npm-build-${{ runner.os }}-${{ github.sha }}
          path: |
            .server
            .public

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          cache: 'npm'
          node-version-file: .nvmrc

      - name: Install dependencies
        if: steps.npm-install-cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Run build
        run: npm run build

  publish:
    name: Publish
    needs: [determine-path, build]
    if: needs.determine-path.outputs.workflow-path != 'skip'
    runs-on: ubuntu-24.04
    environment: production

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          ref: ${{ github.ref }}

      - name: Display workflow path
        run: |
          echo "‚≠ê Executing ${{ needs.determine-path.outputs.workflow-path }} workflow path"
          echo "Version bump type: ${{ needs.determine-path.outputs.version-bump }}"
          echo "NPM Tag: ${{ needs.determine-path.outputs.npm-tag || '<auto-detect>' }}"

      - name: Restore dependencies
        uses: actions/cache/restore@v4
        with:
          enableCrossOsArchive: true
          key: npm-install-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          path: node_modules

      - name: Restore build artifacts
        uses: actions/cache/restore@v4
        with:
          enableCrossOsArchive: true
          key: npm-build-${{ runner.os }}-${{ github.sha }}
          path: |
            .server
            .public

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          registry-url: https://registry.npmjs.org
          scope: '@defra'

      - name: Determine version bump details 
        id: version-details
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          VERSION_TYPE="${{ needs.determine-path.outputs.version-bump }}"
          
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          
          # Check for invalid version bumps on release branches
          if [[ "$BRANCH_NAME" =~ release/v([0-9]+) ]]; then
            MAJOR_VERSION="${BASH_REMATCH[1]}"
            
            # Fail if a major bump was requested on a release branch
            if [[ "$VERSION_TYPE" == "major" ]]; then
              echo "::error::‚õî MAJOR VERSION BUMP NOT ALLOWED ON RELEASE BRANCH"
              echo "::error::Branch release/v${MAJOR_VERSION} is locked to major version ${MAJOR_VERSION}."
              echo "::error::To publish a new major version, create a new branch named release/v$((MAJOR_VERSION+1))."
              exit 1
            fi
            
            # Set the package version to match the major version if needed
            CURRENT_VERSION=$(npm pkg get version | tr -d \")
            CURRENT_MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
            
            if [[ "$CURRENT_MAJOR" != "$MAJOR_VERSION" ]]; then
              echo "::error::üö´ Major version mismatch: package.json version $CURRENT_VERSION does not match release/v${MAJOR_VERSION} branch."
              echo "::error::Please update the package.json manually to match major version ${MAJOR_VERSION}, or rename the branch if you intended a different major."
              exit 1
            fi
          fi
          
          echo "VERSION_TYPE=$VERSION_TYPE" >> $GITHUB_ENV

      - name: Update package version
        run: |
          echo "Bumping version: $VERSION_TYPE"
          npm version $VERSION_TYPE --git-tag-version false --save

      - name: Commit and push updates
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          NEW_VERSION=$(npm pkg get version | tr -d \")
          git commit -am "v$NEW_VERSION [skip ci]" && git push

      - name: Publish to npm with appropriate dist-tag
        run: |
          # Fix redundant variable assignment
          NEW_VERSION=$(npm pkg get version | tr -d \")
          PUBLISH_ARGS="--access public"
          
          # First priority: Check for custom tag from inputs
          if [[ -n "${{ needs.determine-path.outputs.npm-tag }}" ]]; then
            DIST_TAG="${{ needs.determine-path.outputs.npm-tag }}"
            PUBLISH_ARGS="$PUBLISH_ARGS --tag $DIST_TAG"
            echo "Publishing v$NEW_VERSION with custom tag '$DIST_TAG'"
          # Second priority: Check for branch-specific tags
          elif [[ "$BRANCH_NAME" == "main" ]]; then
            echo "Publishing v$NEW_VERSION from main -> using default 'latest' tag"
          elif [[ "$BRANCH_NAME" =~ release/v([0-9]+) ]]; then
            MAJOR_VERSION="${BASH_REMATCH[1]}"
            # Using Mongoose-style tag format: 1x, 2x, 3x
            DIST_TAG="${MAJOR_VERSION}x"
            PUBLISH_ARGS="$PUBLISH_ARGS --tag $DIST_TAG"
            echo "Publishing v$NEW_VERSION from $BRANCH_NAME -> using tag '$DIST_TAG'"
          else
            # Safety check for non-standard branches
            if [[ "${{ github.event_name }}" == "workflow_dispatch" && -z "${{ needs.determine-path.outputs.npm-tag }}" ]]; then
              echo "‚ö†Ô∏è WARNING: Publishing from non-standard branch '$BRANCH_NAME' without a custom npm tag"
              echo "‚ö†Ô∏è This will publish as 'latest' and may overwrite your production release"
            fi
            echo "Branch $BRANCH_NAME doesn't match expected patterns, using default publishing"
          fi
          
          # Add dry-run flag if specified (for manual workflow)
          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            PUBLISH_ARGS="$PUBLISH_ARGS --dry-run"
            echo "DRY RUN MODE - No actual publishing will occur"
          fi

          # Temporary safety measure for testing
          # PUBLISH_ARGS="$PUBLISH_ARGS --dry-run"
          # echo "‚ö†Ô∏è TEST MODE: Force using --dry-run flag. Remove before merging to main! ‚ö†Ô∏è"
          
          # Execute npm publish with all arguments
          npm publish $PUBLISH_ARGS
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
