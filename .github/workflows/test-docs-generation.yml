name: Test Documentation Generation

on:
  workflow_dispatch:
    inputs:
      branch_type:
        description: 'Type of branch to simulate'
        required: true
        default: 'main'
        type: choice
        options:
          - main
          - release/v1
          - release/v2
  pull_request:
    branches:
      - main

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  test-docs-generation:
    runs-on: ubuntu-latest
    environment:
      name: github-pages-test
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      - name: Install dependencies
        run: npm ci

      - name: Set branch type based on trigger
        id: set-branch
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "BRANCH_TYPE=${{ github.event.inputs.branch_type }}" >> $GITHUB_ENV
          else
            echo "BRANCH_TYPE=main" >> $GITHUB_ENV
          fi
          echo "VERSION=1.2.3" >> $GITHUB_ENV

      - name: Generate documentation
        run: |
          mkdir -p .github/scripts/docs
          bash .github/scripts/docs/generate-and-publish-docs.sh "$BRANCH_TYPE" "$VERSION"

      - name: Build Jekyll site
        run: |
          # Create Jekyll source directory
          mkdir -p site-src
          
          # Copy all docs to site-src
          cp -r docs/* site-src/
          
          # Fix specific problematic files directly using simpler methods
          
          # 1. For PAGE_TEMPLATES.md - replace the problematic jinja2 code block
          if [ -f site-src/features/configuration-based/PAGE_TEMPLATES.md ]; then
            echo "üîß Processing PAGE_TEMPLATES.md file with special handling..."
            
            # Create a temporary file with our replacement content
            cat > replacement_jinja2.txt << 'EOT'
```jinja2
<!-- Liquid template example (commented out for Jekyll compatibility):
<p class="govuk-body">
  {# Use Liquid's `assign` to create a variable that holds reference to the "/are-you-in-england" page #}
  {# assign inEngland = "/are-you-in-england" | page #}

  {# Use the reference to `evaluate` the title #}
  {# inEngland.title | evaluate #}<br>

  {# Use the href filter to display the full page path #}
  {# "/are-you-in-england" | href #}<br>

  {# Use the `answer` filter to render the user provided answer to a question #}
  {# 'TKsWbP' | answer #}
</p>
-->
```
EOT
            
            # Create a temporary file for the jsonc replacement
            cat > replacement_jsonc.txt << 'EOT'
```jsonc
{
  // This example shows how a Html (guidance) component can use the available filters
  "title": "Template example for <!-- {{ WmHfSb }} -->?",
  "path": "/example",
  "components": [
    {
      "title": "Html",
      "type": "Html",
      "content": "<p class=\"govuk-body\">Example content (Liquid syntax removed for docs)</p>"
    }
  ]
}
```
EOT
            
            # Use sed to replace the blocks - this is much safer than complex awk commands
            # First find line numbers of the start and end of the blocks
            jinja_start=$(grep -n '```jinja2' site-src/features/configuration-based/PAGE_TEMPLATES.md | head -1 | cut -d':' -f1)
            jinja_end=$(tail -n +$jinja_start site-src/features/configuration-based/PAGE_TEMPLATES.md | grep -n '```' | head -1 | cut -d':' -f1)
            jinja_end=$((jinja_start + jinja_end - 1))
            
            jsonc_start=$(grep -n '```jsonc' site-src/features/configuration-based/PAGE_TEMPLATES.md | head -1 | cut -d':' -f1)
            jsonc_end=$(tail -n +$jsonc_start site-src/features/configuration-based/PAGE_TEMPLATES.md | grep -n '```' | head -1 | cut -d':' -f1)
            jsonc_end=$((jsonc_start + jsonc_end - 1))
            
            # Create a new file with replacements
            head -n $((jinja_start - 1)) site-src/features/configuration-based/PAGE_TEMPLATES.md > site-src/features/configuration-based/PAGE_TEMPLATES.md.new
            cat replacement_jinja2.txt >> site-src/features/configuration-based/PAGE_TEMPLATES.md.new
            tail -n +$((jinja_end + 1)) site-src/features/configuration-based/PAGE_TEMPLATES.md | head -n $((jsonc_start - jinja_end - 1)) >> site-src/features/configuration-based/PAGE_TEMPLATES.md.new
            cat replacement_jsonc.txt >> site-src/features/configuration-based/PAGE_TEMPLATES.md.new
            tail -n +$((jsonc_end + 1)) site-src/features/configuration-based/PAGE_TEMPLATES.md >> site-src/features/configuration-based/PAGE_TEMPLATES.md.new
            
            # Replace the original file
            mv site-src/features/configuration-based/PAGE_TEMPLATES.md.new site-src/features/configuration-based/PAGE_TEMPLATES.md
          fi
          
          # 2. Fix PAGE_EVENTS.md - it has an extra endif
          if [ -f site-src/features/configuration-based/PAGE_EVENTS.md ]; then
            echo "üîß Processing PAGE_EVENTS.md to fix endif issue..."
            sed -i '/You have not been awarded any funding for this application/,+2 s/{% endif %}//' site-src/features/configuration-based/PAGE_EVENTS.md
          fi
          
          # Process INDEX.md - replace .md with .html
          echo "üîÑ Processing index.md file..."
          sed 's/\.md/\.html/g' docs/INDEX.md > site-src/index.md
          
          # Ensure proper front matter in index.md
          if ! grep -q "^---" site-src/index.md; then
            sed -i '1s/^/---\nlayout: default\ntitle: DXT Documentation\n---\n\n/' site-src/index.md
          fi
          
          # Process all markdown files for general fixes
          echo "üîÑ Processing all markdown files..."
          find site-src -type f -name "*.md" | while read file; do
            echo "  - Processing $file"
            
            # Replace .md with .html in links
            sed -i 's/\.md/\.html/g' "$file"
            
            # Ensure every file has front matter
            if ! grep -q "^---" "$file"; then
              echo "    ‚úèÔ∏è Adding front matter to $file"
              sed -i '1s/^/---\nlayout: default\n---\n\n/' "$file"
            fi
            
            # Fix any 'layout: home' references
            sed -i 's/layout: home/layout: default/g' "$file"
            
            # Escape Liquid tags but preserve code blocks
            sed -i 's/{{/\\{{ /g; s/}}/\\}} /g; s/{%/\\{% /g; s/%}/\\%} /g' "$file"
            
            # Un-escape within code blocks (between ``` markers)
            # This is complex so we'll use a marker-based approach
            sed -i '/^```/,/^```/ s/\\{{ /{{/g; /^```/,/^```/ s/\\}} /}}/g; /^```/,/^```/ s/\\{% /{%/g; /^```/,/^```/ s/\\%} /%}/g' "$file"
          done
          
          # Create _config.yml with settings to process all files
          echo "üìù Creating Jekyll config files..."
          cat > site-src/_config.yml << EOF
          title: DXT Documentation
          description: Documentation for the DEFRA Forms Engine Plugin
          
          # Ensure all files are included
          include:
            - "**/*.html"
          
          # Basic settings
          markdown: kramdown
          kramdown:
            input: GFM
            syntax_highlighter: rouge
            
          # Use remote GitHub-hosted theme
          remote_theme: pages-themes/minimal@v0.2.0
          
          plugins:
            - jekyll-remote-theme
            - jekyll-relative-links
            - jekyll-seo-tag
            
          relative_links:
            enabled: true
            collections: true
            
          defaults:
            - scope:
                path: ""
                type: "pages"
              values:
                layout: default
          EOF
          
          # Create Gemfile with exact dependencies
          cat > site-src/Gemfile << EOF
          source 'https://rubygems.org'
          
          gem 'jekyll', '~> 4.4.0'
          gem 'jekyll-remote-theme', '0.4.3'
          gem 'jekyll-relative-links'
          gem 'jekyll-sass-converter', '~> 3.0.0'
          gem 'jekyll-seo-tag'
          gem 'webrick' # required for Ruby 3.x
          EOF
          
          # Install dependencies and build
          echo "üî® Building Jekyll site..."
          cd site-src
          bundle install
          JEKYLL_ENV=production bundle exec jekyll build --verbose --destination ../_site
          cd ..
          
          # Thorough verification
          echo "üîç Verifying build results..."
          
          # Check for HTML files
          echo "‚úì HTML files generated from markdown:"
          find _site -name "*.html" | grep -v "assets" | head -n 15
          html_count=$(find _site -name "*.html" | wc -l)
          echo "  Total HTML files: $html_count"
          
          # Check if any markdown files remain in output (there shouldn't be any)
          md_files=$(find _site -name "*.md" | wc -l)
          if [ "$md_files" -gt 0 ]; then
            echo "‚ö†Ô∏è WARNING: Found $md_files markdown files in output (should be 0):"
            find _site -name "*.md" | head -n 10
          else
            echo "‚úÖ No markdown files found in output (good!)"
          fi
          
          # Check for specific problematic files to make sure they were converted
          for check_file in "features/configuration-based/PAGE_TEMPLATES.html" "features/configuration-based/PAGE_EVENTS.html" "features/code-based/PAGE_VIEWS.html"; do
            if [ -f "_site/$check_file" ]; then
              echo "‚úÖ Successfully converted: $check_file"
            else
              echo "‚ùå FAILED to convert: $check_file"
            fi
          done
          
          # Final output structure
          echo "üìä Final site structure:"
          find _site -type f | grep -v ".git" | grep -e "index.html" -e "features" | sort | head -n 15
          echo "... (and more files)"

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_site'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          timeout: 600000 # 10 minutes in milliseconds